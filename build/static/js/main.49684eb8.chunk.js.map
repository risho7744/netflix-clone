{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchToprated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","NavBar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49684eb8.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/** base url to make requets to the movie database */\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});  \n\n\nexport default instance;","import React, { useState, useEffect } from 'react'\nimport YouTube from 'react-youtube';\nimport axios from \"./axios\";\nimport './Row.css';\nimport movieTrailer from \"movie-trailer\";\n \nconst base_url=\"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    // a snippet of code which runs based on a specific condition/variable\n    useEffect(() => {\n        // if [] run once when the row loads, and dont run again\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            // the above line request the following URL from the API => https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}&language=en-US\n           \n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width:\"100%\",\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay:1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then ((url) => {\n                // https://www.youtube.com/watch? |v=L8QzFU0k5OA| \n                // we will get the value of \"v\"\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get(\"v\"));\n            })\n            .catch((error) => console.log(error));\n        }\n    };\n\n    return (\n        <div className=\"row\">\n            <h2 className=\"row_title\">{title}</h2>\n\n            <div \n            className=\"row__posters\">\n            \n            {/** several row poster(s) */}\n            \n            {movies.map(movie => (\n                <img \n                    key={movie.id}\n                    onClick={() => handleClick(movie)}\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    src={`${base_url}${\n                    isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                    alt={movie.name} />\n            ))}\n            </div>\n            {trailerUrl && <YouTube videoId={'L8QzFU0k5OA'} opts={opts} />}\n        </div>    \n    )\n}\n\nexport default Row\n","const API_KEY = \"7075f54cac194985d8c84b16fb8363d6\";\n\n \nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchToprated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n\n}\n\nexport default requests;","import React, { useState, useEffect } from 'react';\nimport axios from'./axios';\nimport requests from './requests'\nimport './Banner.css';\n\nfunction Banner() {\n    const [movie, setMovie] = useState();\n\n    useEffect(() => {\n        async function fetchData () {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length)\n                ]\n            );\n            return request;\n        }\n        fetchData();\n    }, []);\n\n    console.log(movie);\n\n    function truncate(str, n) {\n        return (str?.length > n ? str.substr(0, n - 1) + \"...\" : str);\n    }\n\n    return (\n        <>\n        <header className=\"banner\" \n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n                backgroundPosition: \"center center\",\n            }}\n        > \n            <div className=\"banner__contents\">\n                <h1 className=\"banner_title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n\n                <div className=\"banner_buttons\">\n                    <button className=\"banner_button\">Play</button>\n                    <button className=\"banner_button\">My List</button>\n                </div>\n\n                <h1 className=\"banner_description\">\n                    {truncate(movie?.overview, 150)}\n                </h1>\n            </div>    \n            <div className=\"banner--fadeBottom\" />\n        </header>\n        </>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react'\nimport './NavBar.css';\n\nfunction NavBar() {\n    const [show, handleShow] = useState(false);\n\n    useEffect (() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n        \n\n    return (\n        <div className={`nav ${show && \"nav_black\"}`}>\n            <img \n                className=\"nav_logo\"\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n                alt=\"Netflix Logo\"\n            />\n\n            <img \n                className=\"nav_avatar\"\n                src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\n                alt=\"Netflix Logo\"\n            />\n\n            \n        </div>\n    )\n}\n\nexport default NavBar\n","import Row from './Row';\nimport './App.css';\nimport requests from './requests';\nimport Banner from './Banner';\nimport NavBar from './NavBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <NavBar />\n\n      <Banner />\n\n      <Row \n      title=\"NETFLIX ORIGINALS\" \n      fetchUrl={requests.fetchNetflixOriginals}\n      isLargeRow\n      />\n      \n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchToprated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}